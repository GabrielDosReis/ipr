// -*- C++ -*-
//
// This file is part of The Pivot framework.
// Written by Gabriel Dos Reis.
// See LICENSE for copyright and license notices.
//

#ifndef IPR_ATTRIBUTE_INCLUDED
#define IPR_ATTRIBUTE_INCLUDED

#include <cstdint>
#include <ipr/synopsis>
#include <ipr/location>

namespace ipr {
   // -----------------------------------
   // -- Basic syntactic units: Tokens --
   // -----------------------------------
   // The IPR focuses primarily on semantic aspects of C++ constructs.
   // Certain constructs, such as uninstantiated template definitions,
   // are primarily syntactic with minimal semantic processing.  IPR nodes
   // can fully represent those structurally well-defined syntactic entities.
   // However, C++11 added attributes which are essentially token soups.  These
   // attributes make the IPR interface less abstract than wanted.

   // General classification of tokens, e.g. identifier, number, space, comment, etc.
   enum class TokenCategory : std::uint8_t { };

   // A numerical value associated with each token.
   enum class TokenValue : std::uint16_t { };

   struct Lexeme {
      virtual const String& spelling() const = 0;
      virtual const Source_location& locus() const = 0;
   };

   struct Token {
      virtual const Lexeme& lexeme() const = 0;
      virtual TokenValue value() const = 0;
      virtual TokenCategory category() const = 0;
   };

   struct Attribute {
      struct Visitor;
      virtual void accept(Visitor&) const = 0;
   };

   // A simple token used as attribute.
   struct BasicAttribute : Attribute {
      virtual const Token& token() const = 0;
   };

   // An attribute of the form `token1 :: token2'
   struct ScopedAttribute : Attribute {
      virtual const Token& scope() const = 0;
      virtual const Token& member() const = 0;
   };

   // An attribute of the form `token : attribute'.
   struct LabeledAttribute : Attribute {
      virtual const Token& label() const = 0;
      virtual const Attribute& attribute() const = 0;
   };

   // An attribute of the form `f(args)'.
   struct CalledAttribute : Attribute {
      virtual const Attribute& function() const = 0;
      virtual const Sequence<Attribute>& arguments() const = 0;
   };

   // An attribute of the form `attribute...'
   struct ExpandedAttribute : Attribute {
      virtual const Token& expander() const = 0;
      virtual const Attribute& operand() const = 0;
   };

   // An attribute of the form `[[using check: memory(3), type(2)]]'
   struct FactoredAttribute : Attribute {
      virtual const Token& factor() const = 0;
      virtual const Sequence<Attribute>& terms() const = 0;
   };

   // An attribute of the form `[[ expr ]]', where `expr' is the elaboration result
   // of parsing and semantics analysis of the enclosed token sequence.  This is a 
   // common non-standard form of attribute.
   struct ElaboratedAttribute : Attribute {
      virtual const Expr& elaboration() const = 0;
   };

   struct Attribute::Visitor {
      virtual void visit(const BasicAttribute&) = 0;
      virtual void visit(const ScopedAttribute&) = 0;
      virtual void visit(const LabeledAttribute&) = 0;
      virtual void visit(const CalledAttribute&) = 0;
      virtual void visit(const ExpandedAttribute&) = 0;
      virtual void visit(const FactoredAttribute&) = 0;
      virtual void visit(const ElaboratedAttribute&) = 0;
   };
}

#endif // IPR_ATTRIBUTE_INCLUDED
